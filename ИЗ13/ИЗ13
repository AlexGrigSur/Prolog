open System
open System.IO
open System.Drawing
open System.Windows.Forms

let form = new Form()
let label1 = new System.Windows.Forms.Label()
let textBox1 = new System.Windows.Forms.TextBox()
let label2 = new System.Windows.Forms.Label()
let textBox2 = new System.Windows.Forms.TextBox()
let button1 = new System.Windows.Forms.Button()
// 
// textBox1
// 
textBox1.Anchor <- (System.Windows.Forms.AnchorStyles.Top ||| System.Windows.Forms.AnchorStyles.Left ||| System.Windows.Forms.AnchorStyles.Right)
textBox1.Location <- new System.Drawing.Point(23, 44)
textBox1.Name <- "textBox1"
textBox1.Size <- new System.Drawing.Size(474, 20)
textBox1.TabIndex <- 0
// 
// button1
// 
button1.Anchor <- (System.Windows.Forms.AnchorStyles.Top ||| System.Windows.Forms.AnchorStyles.Left ||| System.Windows.Forms.AnchorStyles.Right)
button1.Location <- new System.Drawing.Point(23, 87)
button1.Name <- "button1"
button1.Size <- new System.Drawing.Size(474, 69)
button1.TabIndex <- 1
button1.Text <- "Calculate"
button1.UseVisualStyleBackColor <- true
// 
// textBox2
// 
textBox2.Anchor <- (System.Windows.Forms.AnchorStyles.Top ||| System.Windows.Forms.AnchorStyles.Left ||| System.Windows.Forms.AnchorStyles.Right)
textBox2.Location <- new System.Drawing.Point(23, 193)
textBox2.Name <- "textBox2"
textBox2.ReadOnly <- true
textBox2.Size <- new System.Drawing.Size(474, 20)
textBox2.TabIndex <- 2
// 
// label1
// 
label1.AutoSize <- true
label1.Location <- new System.Drawing.Point(20, 25)
label1.Name <- "label1"
label1.Size <-new System.Drawing.Size(146, 13)
label1.TabIndex <- 3
label1.Text <- "Введите начальный список"
// 
// label2
// 
label2.AutoSize <- true
label2.Location <- new System.Drawing.Point(20, 175)
label2.Name <- "label2"
label2.Size <- new System.Drawing.Size(59, 13)
label2.TabIndex <- 4
label2.Text <- "Результат"
// 
// Form1
// 
form.AutoScaleDimensions <- new System.Drawing.SizeF(6.0F, 13.0F)
form.AutoScaleMode <- System.Windows.Forms.AutoScaleMode.Font
form.ClientSize <- new System.Drawing.Size(509, 248)

form.Controls.Add(label2)
form.Controls.Add(label1)
form.Controls.Add(textBox2)
form.Controls.Add(button1)
form.Controls.Add(textBox1)

form.Name = "Form1"
form.Text = "ИЗ13"


//- первый список содержит результат деления на два только четных элементов исходного
//- второй список содержит результат деления на три только тех элементов первого, которые делятся на три
//- третий список содержит квадраты значений второго списка,
//- четвертый список содержит только те элементы третьего, которые встречаются в первом,
//- пятый список содержит все элементы второго, третьего и четвертого списков. 

let sqr x = x*x

let rec Zip5 (list1:list<int>) (list2:list<int>) (list3:list<int>) (list4:list<int>) (list5:list<int>)=
    let rec output list isFirst=
        match list with
        |[] -> textBox2.Text <- textBox2.Text + ") "
        |head::tail ->  if(isFirst) then 
                            textBox2.Text <- textBox2.Text + head.ToString()
                            output tail false
                        else
                            textBox2.Text <- textBox2.Text + ", " + head.ToString()
                            output tail false
    textBox2.Text <- textBox2.Text + "["
    textBox2.Text <- textBox2.Text + "( "
    output list1 true
    textBox2.Text <- textBox2.Text + "( "
    output list2 true
    textBox2.Text <- textBox2.Text + "( "
    output list3 true
    textBox2.Text <- textBox2.Text + "( "
    output list4 true
    textBox2.Text <- textBox2.Text + "( "
    output list5 true
    textBox2.Text <- textBox2.Text + "]"

let Change(e:EventArgs) = 

   let rec list1Calc (textBoxCopy:List<string>) (list1:List<int>) =
        match textBoxCopy with
        | [] -> list1
        | head::tail -> 
                        try
                            let temp = Convert.ToInt32(head.ToString())                            
                            if(temp%2=0) then 
                                list1Calc (textBoxCopy.Tail) (list1@[temp/2])
                            else
                                list1Calc (textBoxCopy.Tail) (list1)
                        with
                            | :? Exception -> list1Calc (tail) list1

   let rec list2Calc (textBoxCopy:List<string>) (list2:List<int>) =
         match textBoxCopy with
         | [] -> list2
         | head::tail -> 
                         try
                             let temp = Convert.ToInt32(head.ToString())                            
                             if(temp%6=0) then 
                                 list2Calc (textBoxCopy.Tail) (list2@[(temp/6)])
                             else
                                 list2Calc (textBoxCopy.Tail) (list2)
                         with
                             | :? Exception -> list2Calc (tail) list2

   let rec list3Calc (textBoxCopy:List<string>) (list3:List<int>) =
         match textBoxCopy with
         | [] -> list3
         | head::tail -> 
                         try
                             let temp = Convert.ToInt32(head.ToString())                            
                             if(temp%6=0) then 
                                 list3Calc (textBoxCopy.Tail) (list3@[sqr (temp/6)])
                             else
                                 list3Calc (textBoxCopy.Tail) (list3)
                             //list3Calc (textBoxCopy.Tail) (list3) 
                         with
                             | :? Exception -> list3Calc (tail) list3

   let rec list4Calc (list1:List<int>) (list3:list<int>) (list4:list<int>) =
          let rec Perebor (list1:List<int>) (elem:int) = 
                match list1 with
                |[] -> false
                |head::tail -> if(list1.Head=elem) then 
                                    true
                               else
                                    Perebor (list1.Tail) (elem)
          match list3 with
          |[] -> list4
          |head::tail -> if(Perebor (list1) (head)) then
                            list4Calc (list1) (tail) (list4@[head])
                         else
                            list4Calc (list1) (tail) (list4)

   let list5Calc (list2:List<int>) (list3:list<int>) (list4:list<int>) = 
          list2@list3@list4

   let textBoxCopy = Seq.toList(textBox1.Text.Split ' ')
   let list1 = list1Calc textBoxCopy []
   let list2 = list2Calc textBoxCopy []
   let list3 = list3Calc textBoxCopy []
   let list4 = list4Calc list1 list3 []
   let list5 = list5Calc list2 list3 list4
   Zip5 list1 list2 list3 list4 list5 |>ignore
   ()

button1.Click.Add(Change)

[<STAThread>]
[<EntryPoint>]
let main argv =
    do Application.Run(form)
    0 
